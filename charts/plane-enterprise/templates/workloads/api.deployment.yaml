
apiVersion: v1
kind: Service
metadata:
  namespace: {{ .Release.Namespace }}
  name: {{ .Release.Name }}-api
  labels:
    app.name: {{ .Release.Namespace }}-{{ .Release.Name }}-api
spec:
  type: ClusterIP
  {{- if not .Values.services.api.assign_cluster_ip }}
  clusterIP: None
  {{- end }}
  ports:
  - name: api-8000
    port: 8000
    protocol: TCP
    targetPort: 8000
  selector:
    app.name: {{ .Release.Namespace }}-{{ .Release.Name }}-api

---

apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ .Release.Namespace }}
  name: {{ .Release.Name }}-api-wl
spec:
  replicas: {{ .Values.services.api.replicas | default 1}}
  selector:
    matchLabels:
      app.name: {{ .Release.Namespace }}-{{ .Release.Name }}-api
  template:
    metadata:
      namespace: {{ .Release.Namespace }}
      labels:
        app.name: {{ .Release.Namespace }}-{{ .Release.Name }}-api
      annotations:
        timestamp: {{ now | quote }}
    spec:
      {{- if and .Values.airgapped.enabled .Values.airgapped.s3SecretName .Values.airgapped.s3SecretKey }}
      volumes:
        - name: s3-custom-ca
          secret:
            secretName: {{ .Values.airgapped.s3SecretName }}
            items:
              - key: {{ .Values.airgapped.s3SecretKey }}
                path: {{ .Values.airgapped.s3SecretKey }}
      {{- end }}
      containers:
      - name: {{ .Release.Name }}-api
        imagePullPolicy: {{ .Values.services.api.pullPolicy | default "Always" }}
        image: {{ .Values.services.api.image | default "artifacts.plane.so/makeplane/backend-commercial" }}:{{ .Values.planeVersion }}
        stdin: true
        tty: true
        resources:
          requests:
            memory: {{ .Values.services.api.memoryRequest | default "50Mi" | quote }}
            cpu: {{ .Values.services.api.cpuRequest | default "50m" | quote }}
          limits:
            memory: {{ .Values.services.api.memoryLimit  | default "1000Mi" | quote }}
            cpu: {{ .Values.services.api.cpuLimit | default "500m" | quote}}
        {{- if and .Values.airgapped.enabled .Values.airgapped.s3SecretName .Values.airgapped.s3SecretKey }}
        volumeMounts:
          - name: s3-custom-ca
            mountPath: /s3-custom-ca
            readOnly: true
        env:
          - name: SSL_CERT_FILE
            value: "/etc/ssl/certs/ca-certificates.crt"
          - name: SSL_CERT_DIR
            value: "/etc/ssl/certs"
          - name: REQUESTS_CA_BUNDLE
            value: "/etc/ssl/certs/ca-certificates.crt"
          - name: CURL_CA_BUNDLE
            value: "/etc/ssl/certs/ca-certificates.crt"
        {{- end }}
        command:
          - /bin/bash
          - -c
          - |
            set -e
            
            {{- if and .Values.airgapped.enabled .Values.airgapped.s3SecretName }}
            echo "Installing custom CA certificates..."
            
            # Ensure ca-certificates directory exists
            mkdir -p /usr/local/share/ca-certificates
            
            # Install custom S3 CA if available
            S3_CERT_FILE="{{ .Values.airgapped.s3SecretKey }}"
            if [ -f "/s3-custom-ca/$S3_CERT_FILE" ]; then
              echo "Installing S3 custom CA certificate..."
              cp "/s3-custom-ca/$S3_CERT_FILE" "/usr/local/share/ca-certificates/$S3_CERT_FILE"
              # Update CA certificates
              update-ca-certificates
              echo "CA certificates installed successfully"
            else
              echo "No custom S3 CA certificate found, skipping..."
            fi
            {{- end }}
            
            # Start the API
            exec ./bin/docker-entrypoint-api-ee.sh
        envFrom:
          - configMapRef:
              name: {{ .Release.Name }}-app-vars
              optional: false
          - secretRef:
              name: {{ if not (empty .Values.external_secrets.app_env_existingSecret) }}{{ .Values.external_secrets.app_env_existingSecret }}{{ else }}{{ .Release.Name }}-app-secrets{{ end }}
              optional: false
          - secretRef:
              name: {{ if not (empty .Values.external_secrets.doc_store_existingSecret) }}{{ .Values.external_secrets.doc_store_existingSecret }}{{ else }}{{ .Release.Name }}-doc-store-secrets{{ end }}
              optional: false
          {{- if .Values.services.silo.enabled }}
          - secretRef:
              name: {{ if not (empty .Values.external_secrets.silo_env_existingSecret) }}{{ .Values.external_secrets.silo_env_existingSecret }}{{ else }}{{ .Release.Name }}-silo-secrets{{ end }}
              optional: false
          {{- end }}
        readinessProbe:
          failureThreshold: 30
          httpGet:
            path: /
            port: 8000
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1

      serviceAccount: {{ .Release.Name }}-srv-account
      serviceAccountName: {{ .Release.Name }}-srv-account
---