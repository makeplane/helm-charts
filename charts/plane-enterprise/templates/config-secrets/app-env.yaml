{{- if empty .Values.external_secrets.app_env_existingSecret}}
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  namespace: {{ .Release.Namespace }}
  name: {{ .Release.Name }}-app-secrets
stringData:
  SECRET_KEY: {{ .Values.env.secret_key | default "60gp0byfz2dvffa45cxl20p1scy9xbpf6d8c5y0geejgkyp1b5" | quote }}
  AES_SECRET_KEY: {{ .Values.env.silo_envs.aes_secret_key | default "dsOdt7YrvxsTIFJ37pOaEVvLxN8KGBCr" | quote }}
  LIVE_SERVER_SECRET_KEY: {{ .Values.env.live_server_secret_key | default "htbqvBJAgpm9bzvf3r4urJer0ENReatceh" | quote }}

  {{- if .Values.services.redis.local_setup }}
  REDIS_URL: "redis://{{ .Release.Name }}-redis.{{ .Release.Namespace }}.svc.cluster.local:6379/"
  {{- else }}
  REDIS_URL: {{ .Values.env.remote_redis_url | default "" | quote }}
  {{- end }}

  {{ if .Values.services.postgres.local_setup }}
  DATABASE_URL: "postgresql://{{ .Values.env.pgdb_username }}:{{ .Values.env.pgdb_password }}@{{ .Release.Name }}-pgdb.{{ .Release.Namespace }}.svc.cluster.local/{{ .Values.env.pgdb_name }}"
  {{ else if .Values.env.pgdb_remote_url }}
  DATABASE_URL: {{ .Values.env.pgdb_remote_url}}
  {{ else }}
  DATABASE_URL: ""
  {{ end }}

  {{- if .Values.services.rabbitmq.local_setup }}
  AMQP_URL: "amqp://{{ .Values.services.rabbitmq.default_user}}:{{ .Values.services.rabbitmq.default_password}}@{{ .Release.Name }}-rabbitmq.{{ .Release.Namespace }}.svc.{{ .Values.env.default_cluster_domain | default "cluster.local" }}/"
  {{- else if .Values.services.rabbitmq.external_rabbitmq_url }}
  AMQP_URL: {{ .Values.services.rabbitmq.external_rabbitmq_url}}
  {{- else }}
  AMQP_URL: ""
  {{ end }}

  {{- if and .Values.airgapped.enabled .Values.airgapped.s3SecretName .Values.airgapped.s3SecretKey }}
  AWS_CA_BUNDLE: "/s3-custom-ca/{{ .Values.airgapped.s3SecretKey }}"
  {{- end }}

{{- end }}
---

apiVersion: v1
kind: ConfigMap
metadata:
  namespace: {{ .Release.Namespace }}
  name: {{ .Release.Name }}-app-vars
data:
  PRIME_HOST: {{ .Values.license.licenseServer | quote }}
  MACHINE_SIGNATURE: {{ include "hashString" . | quote }}
  APP_DOMAIN: {{ .Values.license.licenseDomain | quote }}
  APP_VERSION: {{ .Values.planeVersion | quote }}
  PAYMENT_SERVER_BASE_URL: "http://{{ .Release.Name }}-monitor.{{ .Release.Namespace }}.svc.cluster.local:8080/"
  FEATURE_FLAG_SERVER_BASE_URL: "http://{{ .Release.Name }}-monitor.{{ .Release.Namespace }}.svc.cluster.local:8080/"

  API_KEY_RATE_LIMIT: {{ .Values.env.api_key_rate_limit | default "60/minute" | quote }}
  MINIO_ENDPOINT_SSL: {{ .Values.services.minio.env.minio_endpoint_ssl | default false | ternary "1" "0" | quote }}
  USE_STORAGE_PROXY: {{ .Values.env.use_storage_proxy | default false | ternary "1" "0" | quote }}
  INTAKE_EMAIL_DOMAIN: {{ .Values.env.email_service_envs.smtp_domain | default "" | quote }}

  SENTRY_DSN: {{ .Values.env.sentry_dsn | default "" | quote}}
  SENTRY_ENVIRONMENT: {{ .Values.env.sentry_environment | default "" | quote}}
  DEBUG: "0"
  DOCKERIZED: "1"
  GUNICORN_WORKERS: "1"

  WEB_URL: "http://{{ .Values.license.licenseDomain }}"

  LIVE_BASE_URL: "http://{{ .Release.Name }}-live.{{ .Release.Namespace }}.svc.cluster.local:3000/"
  LIVE_BASE_PATH: "/live"

  {{- if .Values.airgapped.enabled }}
  IS_AIRGAPPED: "1"
  {{- end }}

  {{- if eq .Values.env.cors_allowed_origins "*"}}
  CORS_ALLOWED_ORIGINS: "*"
  {{- else if .Values.env.cors_allowed_origins }}
  CORS_ALLOWED_ORIGINS: "http://{{ .Values.license.licenseDomain }},https://{{ .Values.license.licenseDomain }},{{ .Values.env.cors_allowed_origins }}"
  {{- else}}
  CORS_ALLOWED_ORIGINS: "http://{{ .Values.license.licenseDomain }},https://{{ .Values.license.licenseDomain }}"
  {{- end }} 