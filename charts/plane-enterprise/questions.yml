questions:

- variable: dockerRegistry.enabled
  label: Docker Registry Enabled
  type: boolean
  default: false
  group: "Docker Registry"
  show_subquestion_if: true
  subquestions:
  - variable: dockerRegistry.registry
    label: "Docker Registry Url"
    type: string
  - variable: dockerRegistry.loginid
    label: "Login ID"
    type: string
  - variable: dockerRegistry.password
    label: "Password/Token"
    type: password

- variable: planeVersion
  label: Plane Version (Docker Image Tag)
  type: string
  default: v1.2.0
  required: true
  group: "Docker Registry"
  subquestions:
  - variable: services.web.image
    label: Frontend Docker Image
    type: string
    required: true
    default: "registry.plane.tools/plane/web-enterprise"
  - variable: services.space.image
    label: Space Docker Image
    type: string
    required: true
    default: "registry.plane.tools/plane/space-enterprise"
  - variable: services.admin.image
    label: Admin Docker Image
    type: string
    required: true
    default: "registry.plane.tools/plane/admin-enterprise"
  - variable: services.live.image
    label: Live Docker Image
    type: string
    required: true
    default: "registry.plane.tools/plane/live-enterprise"
  - variable: services.monitor.image
    label: Monitor Docker Image
    type: string
    required: true
    default: "registry.plane.tools/plane/monitor-enterprise"
  - variable: services.api.image
    label: Backend Docker Image
    type: string
    required: true
    default: "registry.plane.tools/plane/backend-enterprise"
    description: "Used by API, Worker, Beat-Worker"
  - variable: env.storageClass
    label: "Storage Class for Persistent Volume Claims"
    type: string
    default: "longhorn"

- variable: license.licenseServer
  label: "License Server"
  type: string
  required: true
  group: "License Setup"
  subquestions:
  - variable: license.licenseDomain
    label: "License Domain"
    type: string
    required: true

- variable: services.web.replicas
  label: "Default Replica Count"
  type: int
  default: 1
  group: "Web Setup"
  subquestions:
  - variable: services.web.memoryLimit
    label: "Memory Limit"
    type: string
    default: 1000Mi
  - variable: services.web.cpuLimit
    label: "CPU Limit"
    type: string
    default: 500m
  - variable: services.web.assign_cluster_ip
    label: "Assign Cluster IP"
    type: boolean
    default: false
  
- variable: services.space.replicas
  label: "Default Replica Count"
  type: int
  default: 1
  group: "Spaces Setup"
  subquestions:
  - variable: services.space.memoryLimit
    label: "Memory Limit"
    type: string
    default: 1000Mi
  - variable: services.space.cpuLimit
    label: "CPU Limit"
    type: string
    default: 500m
  - variable: services.space.assign_cluster_ip
    label: "Assign Cluster IP"
    type: boolean
    default: false

- variable: services.admin.replicas
  label: "Default Replica Count"
  type: int
  default: 1
  group: "Admin Setup"
  subquestions:
  - variable: services.admin.memoryLimit
    label: "Memory Limit"
    type: string
    default: 1000Mi
  - variable: services.admin.cpuLimit
    label: "CPU Limit"
    type: string
    default: 500m
  - variable: services.admin.assign_cluster_ip
    label: "Assign Cluster IP"
    type: boolean
    default: false

- variable: services.live.replicas
  label: "Default Replica Count"
  type: int
  default: 1
  group: "Live Setup"
  subquestions:
  - variable: services.live.memoryLimit
    label: "Memory Limit"
    type: string
    default: 1000Mi
  - variable: services.live.cpuLimit
    label: "CPU Limit"
    type: string
    default: 500m
  - variable: services.live.assign_cluster_ip
    label: "Assign Cluster IP"
    type: boolean
    default: false
  - variable: env.live_sentry_dsn
    label: "Sentry DSN"
    type: string
    default: ""
  - variable: env.live_sentry_environment
    label: "Sentry Environment"
    type: string
    default: "Development"
  - variable: env.live_sentry_traces_sample_rate
    label: "Sentry Traces Sample Rate"
    type: string

- variable: services.monitor.memoryLimit
  label: "Memory Limit"
  type: string
  default: 1000Mi
  group: "Monitor Setup"
  subquestions:
  - variable: services.monitor.cpuLimit
    label: "CPU Limit"
    type: string
    default: 500m
  - variable: services.monitor.volumeSize
    label: "Volume Size"
    type: string
    default: "100Mi"
  - variable: services.monitor.assign_cluster_ip
    label: "Assign Cluster IP"
    type: boolean
    default: false

- variable: services.api.replicas
  label: "Default Replica Count"
  type: int
  default: 1
  group: "API Setup"
  subquestions:
  - variable: services.api.memoryLimit
    label: "Memory Limit"
    type: string
    default: 1000Mi
  - variable: services.api.cpuLimit
    label: "CPU Limit"
    type: string
    default: 500m
  - variable: services.api.assign_cluster_ip
    label: "Assign Cluster IP"
    type: boolean
    default: false
  - variable: env.cors_allowed_origins
    label: "CORS Allowed Origins"
    type: string
    default: ""
  - variable: env.sentry_dsn
    label: "Sentry DSN"
    type: string
    default: ""
  - variable: env.sentry_environment
    label: "Sentry Environment"
    type: string
    default: "Development"
  - variable: env.secret_key
    label: "Random Secret Key"
    type: string
    required: true
    default: "60gp0byfz2dvffa45cxl20p1scy9xbpf6d8c5y0geejgkyp1b5"

- variable: services.worker.replicas
  label: "Default Replica Count"
  type: int
  default: 1
  group: "Worker Setup"
  subquestions:
  - variable: services.worker.memoryLimit
    label: "Memory Limit"
    type: string
    default: 1000Mi
  - variable: services.worker.cpuLimit
    label: "CPU Limit"
    type: string
    default: 500m

- variable: services.beatworker.replicas
  label: "Default Replica Count"
  type: int
  default: 1
  group: "Beat Worker Setup"
  subquestions:
  - variable: services.beatworker.memoryLimit
    label: "Memory Limit"
    type: string
    default: 1000Mi
  - variable: services.beatworker.cpuLimit
    label: "CPU Limit"
    type: string
    default: 500m

- variable: services.redis.local_setup
  label: "Install Redis"
  type: boolean
  default: true
  group: "Redis Setup"
  subquestions:
  - variable: services.redis.image
    label: "Docker Image"
    type: string
    default: "registry.plane.tools/plane/valkey:7.2.5-alpine"
    show_if: "services.redis.local_setup=true"
  - variable: services.redis.servicePort
    label: Port
    type: int
    default: 6379
    show_if: "services.redis.local_setup=true"
  - variable: services.redis.volumeSize
    label: "Volume Size"
    type: string
    default: "500Mi"
    show_if: "services.redis.local_setup=true"
  - variable: services.redis.assign_cluster_ip
    label: "Assign Cluster IP"
    type: boolean
    default: false
    show_if: "services.redis.local_setup=true"
  - variable: env.remote_redis_url
    label: "Remote Redis URL"
    type: string
    default: "redis://"
    show_if: "services.redis.local_setup=false"

- variable: services.postgres.local_setup
  label: "Install Postgres"
  type: boolean
  default: true
  group: "Postgres Setup"
  # show_subquestion_if: true
  subquestions:
  - variable: services.postgres.image
    label: "Docker Image"
    type: string
    default: "registry.plane.tools/plane/postgres:15.5-alpine"
    show_if: "services.postgres.local_setup=true"
  - variable: services.postgres.servicePort
    label: Service Port
    type: int
    default: 5432
    show_if: "services.postgres.local_setup=true"
  - variable: services.postgres.cliConnectPort
    label: CLI Connect Port
    type: int
    show_if: "services.postgres.local_setup=true"
  - variable: services.postgres.volumeSize
    label: "Volume Size"
    type: string
    default: "5Gi"
    show_if: "services.postgres.local_setup=true"
  - variable: env.pgdb_username
    label: "Username"
    type: string
    default: "plane"
    show_if: "services.postgres.local_setup=true"
  - variable: env.pgdb_password
    label: "Password"
    type: password
    default: "plane"
    show_if: "services.postgres.local_setup=true"
  - variable: env.pgdb_name
    label: "DB Name"
    type: string
    default: "plane"
    show_if: "services.postgres.local_setup=true"
  - variable: services.postgres.assign_cluster_ip
    label: "Assign Cluster IP"
    type: boolean
    default: false
    show_if: "services.postgres.local_setup=true"
  - variable: env.pgdb_remote_url
    label: "Remote URL"
    type: string
    default: "postgresql://"
    show_if: "services.postgres.local_setup=false"

- variable: services.rabbitmq.local_setup
  label: "Install RabbitMQ"
  type: boolean
  default: true
  group: "RabbitMQ Setup"
  subquestions:
  - variable: services.rabbitmq.image
    label: "Docker Image"
    type: string
    default: "rabbitmq:3.13.6-management-alpine"
    show_if: "services.rabbitmq.local_setup=true"
  - variable: services.rabbitmq.servicePort
    label: Service Port
    type: int
    default: 5672
    show_if: "services.rabbitmq.local_setup=true"
  - variable: services.rabbitmq.managementPort
    label: Management Port
    type: int
    default: 15672
    show_if: "services.rabbitmq.local_setup=true"
  - variable: services.rabbitmq.assign_cluster_ip
    label: "Assign ClusterIP"
    type: boolean
    default: false
    show_if: "services.rabbitmq.local_setup=true"
  - variable: services.rabbitmq.storageClass
    label: "Storage Class"
    type: string
    default: "longhorn"
    show_if: "services.rabbitmq.local_setup=true"
  - variable: services.rabbitmq.volumeSize
    label: "Volume Size"
    type: string
    default: "100Mi"
    show_if: "services.rabbitmq.local_setup=true"
  - variable: services.rabbitmq.default_user
    label: "Username"
    type: string
    default: "plane"
    show_if: "services.rabbitmq.local_setup=true"
  - variable: services.rabbitmq.default_password
    label: "Password"
    type: password
    default: "plane"
    show_if: "services.rabbitmq.local_setup=true"
  - variable: services.rabbitmq.external_rabbitmq_url
    label: "Remote URL"
    type: string
    show_if: "services.rabbitmq.local_setup=false"
    
- variable: services.minio.local_setup
  label: "Install Minio"
  type: boolean
  default: true
  group: "Storage Setup"
  subquestions:
  - variable: services.minio.image
    label: "Docker Image"
    type: string
    default: "registry.plane.tools/plane/minio:latest"
    show_if: "services.minio.local_setup=true"
  - variable: services.minio.root_user
    label: "Root User"
    type: string
    default: "admin"
    show_if: "services.minio.local_setup=true"
  - variable: services.minio.root_password
    label: "Root Password"
    type: password
    default: "password"
    show_if: "services.minio.local_setup=true"
  - variable: services.minio.volumeSize
    label: "Volume Size"
    type: string
    default: "5Gi"
    show_if: "services.minio.local_setup=true"
  - variable: services.minio.assign_cluster_ip
    label: "Assign Cluster IP"
    type: boolean
    default: false
    show_if: "services.minio.local_setup=true"
  - variable: env.aws_access_key
    label: "AWS Access Key"
    type: string
    default: ""
    show_if: "services.minio.local_setup=false"
  - variable: env.aws_secret_access_key
    label: "AWS Secret Key"
    type: password
    default: ""
    show_if: "services.minio.local_setup=false"
  - variable: env.aws_region
    label: "AWS Region"
    type: string
    default: ""
    show_if: "services.minio.local_setup=false"
  - variable: env.aws_s3_endpoint_url
    label: "AWS S3 Endpoint URL"
    type: string
    default: ""
    show_if: "services.minio.local_setup=false"
  - variable: env.docstore_bucket
    label: "Bucket Name"
    type: string
    default: "uploads"
  - variable: env.doc_upload_size_limit
    label: "File Upload Size Limit"
    type: string
    default: "5242880"

- variable: ingress.enabled
  label: "Enable Ingress"
  type: boolean
  required: true
  default: true
  group: "Ingress"
  # show_subquestion_if: true
  subquestions:
  - variable: ingress.minioHost
    label: "Minio Host"
    type: string
    default: "plane-minio.example.com"
    show_if: "services.minio.local_setup=true"
  - variable: ingress.rabbitmqHost
    label: "Rabbitmq Host"
    type: string
    default: "plane-rabbitmq.example.com"
    show_if: "services.rabbitmq.local_setup=true"
  - variable: ingress.ingressClass
    label: "Ingress Classname"
    type: string
    required: true
    default: "nginx"
    show_if: "ingress.enabled=true"

- variable: ssl.createIssuer
  label: "Create Issuer"
  type: boolean
  default: false
  group: "Ingress"
  show_if: "ingress.enabled=true"
  show_subquestion_if: true
  subquestions:
  - variable: ssl.issuer
    label: "SSL Issuer"
    type: enum
    options:
      - "http"
      - "cloudflare"
      - "digitalocean"
    default: "http"
  - variable: ssl.server
    label: "Let's Encrypt Server URL"
    type: string
    default: "https://acme-v02.services.api.letsencrypt.org/directory"
  - variable: ssl.email
    label: "Let's Encrypt Reg. Email"
    type: string
    default: "plane@example.com"
  - variable: ssl.token
    label: "Provider API Token"
    type: password
    default: ""
    description: "Not required for 'http' issuer"
    show_if: "ssl.issuer=cloudflare || ssl.issuer=digitalocean"
  - variable: ssl.generateCerts
    label: "Enable to generate certificates"
    type: boolean
    default: false

